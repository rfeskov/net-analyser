import telebot
from fastapi import FastAPI, Request, HTTPException, Header
from pydantic import BaseModel
import threading
import uvicorn
from datetime import datetime
import time
import random

# ==== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ====
TOKEN = "7517930802:AAFQHZogsvsh2uShM6cGi562G7T9Kvt9csY"
ADMIN_ID = 404051961
API_KEY = "super-secret-key"  # –¥–ª—è –∑–∞—â–∏—Ç—ã FastAPI endpoint
MONITORING_INTERVAL = 300  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)

bot = telebot.TeleBot(TOKEN)
app = FastAPI()
subscribers = set()

# ==== –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è /send ====
class NotificationRequest(BaseModel):
    text: str

# ==== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ====
DEMO_POINTS = ['Office-1', 'Office-2', 'Meeting-Room', 'Reception']
DEMO_BANDS = ['2.4 GHz', '5 GHz']
DEMO_CHANNELS = {
    '2.4 GHz': [1, 6, 11],
    '5 GHz': [36, 40, 44, 48]
}
DEMO_ISSUES = [
    "üî¥ –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {}%",
    "‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {}%",
    "üì¶ –ë–æ–ª—å—à–∞—è –ø–æ—Ç–µ—Ä—è –ø–∞–∫–µ—Ç–æ–≤: {}",
    "üì∂ –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª: {} dBm"
]

def generate_random_notification():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö"""
    num_points = random.randint(1, 3)  # –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
    all_issues = []
    
    for _ in range(num_points):
        point = random.choice(DEMO_POINTS)
        band = random.choice(DEMO_BANDS)
        channel = random.choice(DEMO_CHANNELS[band])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–±–ª–µ–º
        load = random.randint(75, 95)
        stability = random.randint(40, 65)
        packets = random.randint(25, 50)
        signal = random.randint(-90, -75)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –¥–ª—è —Ç–æ—á–∫–∏
        num_issues = random.randint(1, 3)
        point_issues = random.sample([
            DEMO_ISSUES[0].format(load),
            DEMO_ISSUES[1].format(stability),
            DEMO_ISSUES[2].format(packets),
            DEMO_ISSUES[3].format(signal)
        ], num_issues)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–∫–∏
        all_issues.append(f"\nüîπ –¢–æ—á–∫–∞ {point} ({band}, –∫–∞–Ω–∞–ª {channel}):")
        all_issues.extend([f"  {issue}" for issue in point_issues])
    
    return "‚ö°Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–µ—Ç–∏:\n" + "\n".join(all_issues)

def monitor_demo():
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–ª—É—á–∞–π–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    while True:
        try:
            # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 70% –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if random.random() < 0.7:
                message = generate_random_notification()
                bot.send_message(ADMIN_ID, message)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
        
        time.sleep(MONITORING_INTERVAL)

# ==== –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ====
@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ /subscribe —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

@bot.message_handler(commands=['subscribe'])
def subscribe_handler(message):
    subscribers.add(message.chat.id)
    bot.send_message(message.chat.id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

@bot.message_handler(commands=['unsubscribe'])
def unsubscribe_handler(message):
    subscribers.discard(message.chat.id)
    bot.send_message(message.chat.id, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

@bot.message_handler(commands=['notify'])
def notify_handler(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    text = message.text.replace("/notify", "").strip()
    if not text:
        bot.send_message(message.chat.id, "–î–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    send_notification(text)
    bot.send_message(message.chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

# ==== –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º ====
def send_notification(text):
    for user_id in subscribers:
        try:
            bot.send_message(user_id, f"üì° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n{text}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# ==== FastAPI endpoint ====
@app.post("/send")
async def send_notification_api(
    data: NotificationRequest,
    x_api_key: str = Header(None)
):
    if x_api_key != API_KEY:
        raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
    send_notification(data.text)
    return {"status": "ok", "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}

# ==== –ó–∞–ø—É—Å–∫ FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ====
def start_fastapi():
    uvicorn.run(app, host="0.0.0.0", port=8000)

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
threading.Thread(target=start_fastapi, daemon=True).start()
threading.Thread(target=monitor_demo, daemon=True).start()

# ==== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====
bot.infinity_polling()