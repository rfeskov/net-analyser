import telebot
from fastapi import FastAPI, Request, HTTPException, Header
from pydantic import BaseModel
import threading
import uvicorn
from datetime import datetime
import json
import os

# ==== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ====
TOKEN = "7517930802:AAFQHZogsvsh2uShM6cGi562G7T9Kvt9csY"
ADMIN_ID = 404051961
API_KEY = "super-secret-key"  # –¥–ª—è –∑–∞—â–∏—Ç—ã FastAPI endpoint
ANALYSIS_FILE = os.path.join(os.path.dirname(__file__), 'analysis_results.json')

bot = telebot.TeleBot(TOKEN)
app = FastAPI()
subscribers = set()

# ==== –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è /send ====
class NotificationRequest(BaseModel):
    text: str

# ==== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ====
def load_analysis_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(ANALYSIS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return None

def get_point_names():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ç–æ—á–µ–∫ –¥–æ—Å—Ç—É–ø–∞"""
    data = load_analysis_data()
    if data and 'point_analyses' in data:
        return list(data['point_analyses'].keys())
    return []

def get_point_data(point_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—á–∫–∏"""
    data = load_analysis_data()
    if data and 'point_analyses' in data:
        return data['point_analyses'].get(point_name)
    return None

def minutes_to_time(minutes):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–∏–Ω—É—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM"""
    hours = int(minutes) // 60
    mins = int(minutes) % 60
    return f"{hours:02d}:{mins:02d}"

def format_channel_table(data, band):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–∞—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É"""
    if not data or not data.get('time_periods'):
        return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {band}"
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    periods = [p for p in data['time_periods'] if p.get('band') == band]
    if not periods:
        return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {band}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    table = f"üìä –¢–∞–±–ª–∏—Ü–∞ —Å–º–µ–Ω—ã –∫–∞–Ω–∞–ª–æ–≤ ({band}):\n\n"
    table += "–í—Ä–µ–º—è | –ö–∞–Ω–∞–ª | –ù–∞–≥—Ä—É–∑–∫–∞ | –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å\n"
    table += "-------|--------|-----------|-------------\n"
    
    for period in periods:
        start_time = minutes_to_time(period['start_time'])
        end_time = minutes_to_time(period['end_time'])
        channel = period['channel']
        load = f"{period['load_score']:.1f}%"
        stability = f"{period['stability'] * 100:.0f}%"
        table += f"{start_time}-{end_time} | {channel} | {load} | {stability}\n"
    
    return table

def format_point_info(point_name, data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—á–∫–µ –¥–æ—Å—Ç—É–ø–∞"""
    if not data or not data.get('time_periods'):
        return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–∫–∏ {point_name}"
    
    info = f"üì° –¢–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {point_name}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ–±–æ–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    table_24 = format_channel_table(data, '2.4 GHz')
    table_5 = format_channel_table(data, '5 GHz')
    
    return f"{info}{table_24}\n\n{table_5}"

# ==== –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ====
@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ /subscribe —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /channels –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö.")

@bot.message_handler(commands=['subscribe'])
def subscribe_handler(message):
    subscribers.add(message.chat.id)
    bot.send_message(message.chat.id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

@bot.message_handler(commands=['unsubscribe'])
def unsubscribe_handler(message):
    subscribers.discard(message.chat.id)
    bot.send_message(message.chat.id, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

@bot.message_handler(commands=['notify'])
def notify_handler(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    text = message.text.replace("/notify", "").strip()
    if not text:
        bot.send_message(message.chat.id, "–î–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    send_notification(text)
    bot.send_message(message.chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

@bot.message_handler(commands=['channels'])
def channels_handler(message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫
        points = get_point_names()
        if not points:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–æ—Å—Ç—É–ø–∞.")
            return
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä —Å –∏–º–µ–Ω–µ–º —Ç–æ—á–∫–∏
        args = message.text.split()
        if len(args) > 1:
            point_name = args[1]
            if point_name in points:
                # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–æ—á–∫–∏
                point_data = get_point_data(point_name)
                response = format_point_info(point_name, point_data)
                bot.send_message(message.chat.id, response)
            else:
                bot.send_message(message.chat.id, f"–¢–æ—á–∫–∞ {point_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                               f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏: {', '.join(points)}")
        else:
            # –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫
            response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞:\n\n"
            for point in points:
                response += f"‚Ä¢ {point}\n"
            response += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '/channels –∏–º—è_—Ç–æ—á–∫–∏' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
            bot.send_message(message.chat.id, response)
            
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–∞–ª–∞—Ö: {e}")

# ==== –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º ====
def send_notification(text):
    for user_id in subscribers:
        try:
            bot.send_message(user_id, f"üì° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n{text}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# ==== FastAPI endpoint ====
@app.post("/send")
async def send_notification_api(
    data: NotificationRequest,
    x_api_key: str = Header(None)
):
    if x_api_key != API_KEY:
        raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
    send_notification(data.text)
    return {"status": "ok", "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}

# ==== –ó–∞–ø—É—Å–∫ FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ====
def start_fastapi():
    uvicorn.run(app, host="0.0.0.0", port=8000)

threading.Thread(target=start_fastapi, daemon=True).start()

# ==== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====
bot.infinity_polling()