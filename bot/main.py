import telebot
from fastapi import FastAPI, Request, HTTPException, Header
from pydantic import BaseModel, Field
from typing import List, Optional
import threading
import uvicorn
from datetime import datetime
import time
import random

# ==== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ====
TOKEN = "7517930802:AAFQHZogsvsh2uShM6cGi562G7T9Kvt9csY"
ADMIN_ID = 404051961
API_KEY = "super-secret-key"  # –¥–ª—è –∑–∞—â–∏—Ç—ã FastAPI endpoint
MONITORING_INTERVAL = 60  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 –º–∏–Ω—É—Ç–∞)

bot = telebot.TeleBot(TOKEN)
app = FastAPI(
    title="WiFi Monitor Bot API",
    description="API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞",
    version="1.0.0"
)
subscribers = set()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º
test_mode = False
monitor_thread = None
monitor_active = False

# ==== –ú–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è API ====
class Issue(BaseModel):
    type: str = Field(..., description="–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã (load/stability/packets/signal)")
    value: float = Field(..., description="–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏")
    
    class Config:
        schema_extra = {
            "example": {
                "type": "load",
                "value": 85.5
            }
        }

class AccessPoint(BaseModel):
    name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞")
    band: str = Field(..., description="–î–∏–∞–ø–∞–∑–æ–Ω —á–∞—Å—Ç–æ—Ç (2.4 GHz/5 GHz)")
    channel: int = Field(..., description="–ù–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞")
    issues: List[Issue] = Field(..., description="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º")
    
    class Config:
        schema_extra = {
            "example": {
                "name": "Office-1",
                "band": "2.4 GHz",
                "channel": 6,
                "issues": [
                    {"type": "load", "value": 85.5},
                    {"type": "signal", "value": -85}
                ]
            }
        }

class NotificationRequest(BaseModel):
    text: Optional[str] = Field(None, description="–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    points: Optional[List[AccessPoint]] = Field(None, description="–°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –¥–æ—Å—Ç—É–ø–∞ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
    
    class Config:
        schema_extra = {
            "example": {
                "points": [
                    {
                        "name": "Office-1",
                        "band": "2.4 GHz",
                        "channel": 6,
                        "issues": [
                            {"type": "load", "value": 85.5},
                            {"type": "signal", "value": -85}
                        ]
                    },
                    {
                        "name": "Meeting-Room",
                        "band": "5 GHz",
                        "channel": 36,
                        "issues": [
                            {"type": "stability", "value": 45},
                            {"type": "packets", "value": 25}
                        ]
                    }
                ]
            }
        }

# ==== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ====
DEMO_POINTS = ['Office-1', 'Office-2', 'Meeting-Room', 'Reception']
DEMO_BANDS = ['2.4 GHz', '5 GHz']
DEMO_CHANNELS = {
    '2.4 GHz': [1, 6, 11],
    '5 GHz': [36, 40, 44, 48]
}
DEMO_ISSUES = [
    "üî¥ –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {}%",
    "‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {}%",
    "üì¶ –ë–æ–ª—å—à–∞—è –ø–æ—Ç–µ—Ä—è –ø–∞–∫–µ—Ç–æ–≤: {}",
    "üì∂ –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª: {} dBm"
]

def format_issue(issue: Issue) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    if issue.type == "load":
        return f"üî¥ –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: {issue.value}%"
    elif issue.type == "stability":
        return f"‚ö†Ô∏è –ù–∏–∑–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {issue.value}%"
    elif issue.type == "packets":
        return f"üì¶ –ë–æ–ª—å—à–∞—è –ø–æ—Ç–µ—Ä—è –ø–∞–∫–µ—Ç–æ–≤: {issue.value}"
    elif issue.type == "signal":
        return f"üì∂ –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª: {issue.value} dBm"
    return f"‚ùóÔ∏è {issue.type}: {issue.value}"

def format_notification(data: NotificationRequest) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    if data.text:
        return data.text
        
    if not data.points:
        raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫")
        
    message = "‚ö°Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–µ—Ç–∏:\n"
    
    for point in data.points:
        message += f"\nüîπ –¢–æ—á–∫–∞ {point.name} ({point.band}, –∫–∞–Ω–∞–ª {point.channel}):\n"
        for issue in point.issues:
            message += f"  {format_issue(issue)}\n"
    
    return message.strip()

def generate_random_notification():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö"""
    num_points = random.randint(1, 3)  # –°–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
    all_issues = []
    
    for _ in range(num_points):
        point = random.choice(DEMO_POINTS)
        band = random.choice(DEMO_BANDS)
        channel = random.choice(DEMO_CHANNELS[band])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–±–ª–µ–º
        load = random.randint(75, 95)
        stability = random.randint(40, 65)
        packets = random.randint(25, 50)
        signal = random.randint(-90, -75)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º –¥–ª—è —Ç–æ—á–∫–∏
        num_issues = random.randint(1, 3)
        point_issues = random.sample([
            DEMO_ISSUES[0].format(load),
            DEMO_ISSUES[1].format(stability),
            DEMO_ISSUES[2].format(packets),
            DEMO_ISSUES[3].format(signal)
        ], num_issues)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–∫–∏
        all_issues.append(f"\nüîπ –¢–æ—á–∫–∞ {point} ({band}, –∫–∞–Ω–∞–ª {channel}):")
        all_issues.extend([f"  {issue}" for issue in point_issues])
    
    return "‚ö°Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–µ—Ç–∏:\n" + "\n".join(all_issues)

def monitor_demo():
    """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–ª—É—á–∞–π–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    global monitor_active
    monitor_active = True
    
    while monitor_active:
        try:
            # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 70% –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if random.random() < 0.7:
                message = generate_random_notification()
                bot.send_message(ADMIN_ID, message)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
        
        time.sleep(MONITORING_INTERVAL)

# ==== –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ====
@bot.message_handler(commands=['start'])
def start_handler(message):
    if message.from_user.id == ADMIN_ID:
        bot.send_message(message.chat.id, 
            "–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
            "/testmode_on - –≤–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º\n"
            "/testmode_off - –≤—ã–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º\n"
            "/status - —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞\n"
            "/notify - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º\n\n"
            "–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/subscribe - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "/unsubscribe - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    else:
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ /subscribe —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

@bot.message_handler(commands=['testmode_on'])
def testmode_on_handler(message):
    global test_mode, monitor_thread, monitor_active
    
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    if test_mode:
        bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —É–∂–µ –≤–∫–ª—é—á–µ–Ω.")
        return
    
    test_mode = True
    monitor_active = True
    monitor_thread = threading.Thread(target=monitor_demo, daemon=True)
    monitor_thread.start()
    
    bot.send_message(message.chat.id, 
        "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω\n"
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É\n"
        "–î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /testmode_off")

@bot.message_handler(commands=['testmode_off'])
def testmode_off_handler(message):
    global test_mode, monitor_active
    
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    if not test_mode:
        bot.send_message(message.chat.id, "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω.")
        return
    
    test_mode = False
    monitor_active = False
    bot.send_message(message.chat.id, "‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω")

@bot.message_handler(commands=['status'])
def status_handler(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if test_mode else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
    bot.send_message(message.chat.id, f"–°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞: {status}")

@bot.message_handler(commands=['subscribe'])
def subscribe_handler(message):
    subscribers.add(message.chat.id)
    bot.send_message(message.chat.id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

@bot.message_handler(commands=['unsubscribe'])
def unsubscribe_handler(message):
    subscribers.discard(message.chat.id)
    bot.send_message(message.chat.id, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

@bot.message_handler(commands=['notify'])
def notify_handler(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    text = message.text.replace("/notify", "").strip()
    if not text:
        bot.send_message(message.chat.id, "–î–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    send_notification(text)
    bot.send_message(message.chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

# ==== –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º ====
def send_notification(text):
    for user_id in subscribers:
        try:
            bot.send_message(user_id, f"üì° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n{text}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# ==== FastAPI endpoints ====
@app.post("/send", 
    summary="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
    description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –±–æ—Ç–∞. –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö.")
async def send_notification_api(
    data: NotificationRequest,
    x_api_key: str = Header(None, description="API –∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
    
    - –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ `text`
    - –ò–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –≤ –ø–æ–ª–µ `points`
    - –¢—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å API –∫–ª—é—á –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ `x-api-key`
    """
    if x_api_key != API_KEY:
        raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
    
    try:
        message = format_notification(data)
        send_notification(message)
        return {"status": "ok", "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# ==== –ó–∞–ø—É—Å–∫ FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ====
def start_fastapi():
    uvicorn.run(app, host="0.0.0.0", port=8000)

# –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=start_fastapi, daemon=True).start()

# ==== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====
bot.infinity_polling()