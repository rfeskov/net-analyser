import telebot
from fastapi import FastAPI, Request, HTTPException, Header
from pydantic import BaseModel
import threading
import uvicorn
from datetime import datetime

# ==== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ====
TOKEN = "7517930802:AAFQHZogsvsh2uShM6cGi562G7T9Kvt9csY"
ADMIN_ID = 404051961
API_KEY = "super-secret-key"  # –¥–ª—è –∑–∞—â–∏—Ç—ã FastAPI endpoint

bot = telebot.TeleBot(TOKEN)
app = FastAPI()
subscribers = set()

# ==== –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è /send ====
class NotificationRequest(BaseModel):
    text: str

# ==== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ====
def minutes_to_time(minutes):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–∏–Ω—É—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM"""
    hours = minutes // 60
    mins = minutes % 60
    return f"{hours:02d}:{mins:02d}"

def format_channel_table(data, band):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–∞—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É"""
    if not data.get('time_periods'):
        return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {band}"
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    periods = [p for p in data['time_periods'] if p.get('band') == band]
    if not periods:
        return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {band}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    table = f"üìä –¢–∞–±–ª–∏—Ü–∞ —Å–º–µ–Ω—ã –∫–∞–Ω–∞–ª–æ–≤ ({band}):\n\n"
    table += "–í—Ä–µ–º—è | –ö–∞–Ω–∞–ª\n"
    table += "------|-------\n"
    
    for period in periods:
        start_time = minutes_to_time(period['start_time'])
        end_time = minutes_to_time(period['end_time'])
        channel = period['channel']
        table += f"{start_time}-{end_time} | {channel}\n"
    
    return table

# ==== –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ====
@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ /subscribe —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

@bot.message_handler(commands=['subscribe'])
def subscribe_handler(message):
    subscribers.add(message.chat.id)
    bot.send_message(message.chat.id, "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")

@bot.message_handler(commands=['unsubscribe'])
def unsubscribe_handler(message):
    subscribers.discard(message.chat.id)
    bot.send_message(message.chat.id, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

@bot.message_handler(commands=['notify'])
def notify_handler(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    text = message.text.replace("/notify", "").strip()
    if not text:
        bot.send_message(message.chat.id, "–î–æ–±–∞–≤—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    send_notification(text)
    bot.send_message(message.chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

@bot.message_handler(commands=['channels'])
def channels_handler(message):
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–∞–ª–∞—Ö
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            'time_periods': [
                {
                    'band': '2.4 GHz',
                    'start_time': 480,  # 8:00
                    'end_time': 720,    # 12:00
                    'channel': 1
                },
                {
                    'band': '2.4 GHz',
                    'start_time': 720,  # 12:00
                    'end_time': 1080,   # 18:00
                    'channel': 6
                },
                {
                    'band': '5 GHz',
                    'start_time': 480,  # 8:00
                    'end_time': 1080,   # 18:00
                    'channel': 36
                }
            ]
        }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ–±–æ–∏—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        table_24 = format_channel_table(test_data, '2.4 GHz')
        table_5 = format_channel_table(test_data, '5 GHz')
        
        response = f"{table_24}\n\n{table_5}"
        bot.send_message(message.chat.id, response)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–∞–ª–∞—Ö: {e}")

# ==== –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º ====
def send_notification(text):
    for user_id in subscribers:
        try:
            bot.send_message(user_id, f"üì° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n{text}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# ==== FastAPI endpoint ====
@app.post("/send")
async def send_notification_api(
    data: NotificationRequest,
    x_api_key: str = Header(None)
):
    if x_api_key != API_KEY:
        raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
    send_notification(data.text)
    return {"status": "ok", "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"}

# ==== –ó–∞–ø—É—Å–∫ FastAPI –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ====
def start_fastapi():
    uvicorn.run(app, host="0.0.0.0", port=8000)

threading.Thread(target=start_fastapi, daemon=True).start()

# ==== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====
bot.infinity_polling()